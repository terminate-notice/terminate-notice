#!/usr/bin/sh
echo "Welcome to the terminate-notice polling service."
echo "Version #TAG# - #TAG_DATE#"
echo "Author: #MAINTAINER#"
echo "Website: https://terminate-notice.github.io"

# shellcheck disable=SC1091
. /usr/share/terminate-notice/helpers

main() {
    _COUNTER=0
    _MESSAGE_SENT=0
    IMSv=2

    # Unset the values about to be loaded from the config file.
    unset metadata_service
    unset terminate_notice_scripts
    
    eval "$(load_config service CORE)"

    debug "CORE" Parsing METADATA_SERVICE values
    
    # shellcheck disable=SC2153
    # shellcheck disable=SC2154
    _METADATA_SERVICE="$(first_of "${METADATA_SERVICE}" "${metadata_service}" "http://169.254.169.254/latest")"
    
    debug "CORE" Parsing TERMINATE_NOTICE_SCRIPTS values

    # shellcheck disable=SC2153
    # shellcheck disable=SC2154
    _TERMINATE_NOTICE_SCRIPTS="$(first_of "${TERMINATE_NOTICE_SCRIPTS}" "${terminate_notice_scripts}" "/usr/share/terminate-notice/actions")"

    debug "CORE" "Checking whether IMSv2 is available"
    if IMSv_Status="$(curl -I -s -f -X PUT "${_METADATA_SERVICE}/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30")"
    then
        debug "CORE" Using IMSv2
        IMSv=2
    else
        debug "CORE" Using IMSv1 - ==REASON STARTS==
        debug "CORE" "$IMSv_Status"
        debug "CORE" ==REASON END==
        IMSv=1
    fi

    debug "CORE" "Checking whether _TERMINATE_NOTICE_SCRIPTS ($_TERMINATE_NOTICE_SCRIPTS) are available"
    if ! cd "${_TERMINATE_NOTICE_SCRIPTS}"
    then
        warning "CORE" "${_TERMINATE_NOTICE_SCRIPTS} is unreachable."
    else
        debug "CORE" "${_TERMINATE_NOTICE_SCRIPTS} are available."
        debug "CORE" Verifying scripts are all ready.
        VERIFY=1
        export VERIFY
        printf '%s\n' ./[0-9]* | sh
        unset VERIFY
    fi

    while true
    do
        debug "Poller" LOOP
        # Ask the Metadata Service for a token with a lifetime of 21600 seconds (skip if no token yet available)
        # But only if we've got IMSv1 set because the token service responded.
        #                                     /--------------------------------------------------------------------- Silent (don't show download graphs)
        #                                     |  /------------------------------------------------------------------ Fail for any 4xx and 5xx responses.
        #                                     |  |                                                                     The service may not respond until ifup.
        #                                     |  |   /-------------------------------------------------------------- Action (put)
        #                                     |  |   |     /-------------------------------------------------------- URL in the metadata service
        #                                     |  |   |     |                                /----------------------- Add this header
        #                                     |  |   |     |                                |   /------------------- Lifetime of this token
        if [ "$IMSv" = "1" ] || TOKEN="$(curl -s -f -X PUT "${_METADATA_SERVICE}/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30")"
        then
            _COUNTER=0
            _MESSAGE_SENT=0
            debug "Poller" Checking with the Metadata Service to see whether there has been a termination notice
            if STATUS="$(
                (
                    if [ "$IMSv" = "2" ]
                    then
                        # Use that token to request the status of "instance-action"
                        # /----------------------------------------------------------------- Silent (don't show download graphs)
                        # |  /-------------------------------------------------------------- Fail for any 4xx and 5xx responses.
                        # |  |                                                                 There will be a 404 until stop/terminate.
                        # |  |  /----------------------------------------------------------- Add this header
                        # |  |  |   /------------------------------------------------------- The header requested before
                        # |  |  |   |                                  /-------------------- The metadata endpoint to identify stop/terminate.
                        # |  |  |   |                                  | Or perform the next check -------------------------\
                        curl --verbose -s -f -H "X-aws-ec2-metadata-token: $TOKEN" "${_METADATA_SERVICE}/meta-data/spot/instance-action" ||
                        # Use that token to request the status of "rebalance-recommendation"
                        # /----------------------------------------------------------------- Silent (don't show download graphs)
                        # |  /-------------------------------------------------------------- Fail for any 4xx and 5xx responses.
                        # |  |                                                                 There will be a 404 until rebalance recommended.
                        # |  |  /----------------------------------------------------------- Add this header
                        # |  |  |   /------------------------------------------------------- The header requested before
                        # |  |  |   |                                  /-------------------- The metadata endpoint to see rebalance recommendation.
                        curl --verbose -s -f -H "X-aws-ec2-metadata-token: $TOKEN" "${_METADATA_SERVICE}/meta-data/events/recommendations/rebalance"
                    else 
                        # /----------------------------------------------------------------- Silent (don't show download graphs)
                        # |  \-------------------------------------------------------------- Fail for any 4xx and 5xx responses.
                        # |  |                                                                 There will be a 404 until stop/terminate.
                        # |  |  /----------------------------------------------------------- The metadata endpoint to identify stop/terminate.
                        # |  |  |  Or perform the next check -------------------------\
                        curl --verbose -s -f "${_METADATA_SERVICE}/meta-data/spot/instance-action" ||
                        # /----------------------------------------------------------------- Silent (don't show download graphs)
                        # |  \-------------------------------------------------------------- Fail for any 4xx and 5xx responses.
                        # |  |                                                                 There will be a 404 until rebalance recommended.
                        # |  |  /----------------------------------------------------------- The metadata endpoint to see rebalance recommendation.
                        curl --verbose -s -f "${_METADATA_SERVICE}/meta-data/events/recommendations/rebalance"
                    fi
                ) 2>/dev/null
            )"
            then
                TERMINATE_NOTICE_RECEIVED=0
                REBALANCE_RECOMMENDATION_RECEIVED=0
                if echo "$STATUS" | grep -q -E "(stop|terminate)"
                then
                    debug "Poller" "Terminate Notice Received."
                    debug "Poller" "STATUS: $STATUS"
                    TERMINATE_NOTICE_RECEIVED=1
                    export TERMINATE_NOTICE_RECEIVED
                elif echo "$STATUS" | grep -q -E "noticeTime"
                then
                    debug "Poller" "Rebalance Recommendation Received."
                    debug "Poller" "STATUS: $STATUS"
                    REBALANCE_RECOMMENDATION_RECEIVED=1
                    export REBALANCE_RECOMMENDATION_RECEIVED
                fi
                if [ "$TERMINATE_NOTICE_RECEIVED" -eq 1 ] || [ "$REBALANCE_RECOMMENDATION_RECEIVED" -eq 1 ]
                then
                    if ! cd "${_TERMINATE_NOTICE_SCRIPTS}"
                    then
                        echo "Terminate Notice received: ${STATUS}"
                        echo "Unable to access ${_TERMINATE_NOTICE_SCRIPTS}."
                        echo "Shutting Down."
                        sleep 5
                        shutdown -h +1
                    else
                        printf '%s\n' ./[0-9]* | sh
                        sleep 10000
                    fi
                fi
            else
                debug "Poller" "Nothing seen: $STATUS"
            fi
        else
            _COUNTER=$((_COUNTER+1))
            if [ $_MESSAGE_SENT -eq 0 ] && [ $_COUNTER -eq 1 ]
            then
                echo "Waiting for the Metadata Service to become available."
                _MESSAGE_SENT=1
            elif [ $_MESSAGE_SENT -eq 1 ] && [ $_COUNTER -eq 5 ]
            then
                echo "Still waiting..."
                _COUNTER=0
            fi
        fi
        sleep 10
    done
}
main